name: 完整应用部署示例

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: '部署版本'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    name: 构建应用
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout 代码
      uses: actions/checkout@v4
      
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录容器注册表
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 构建并推送镜像
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    runs-on: ubuntu-latest
    needs: build
    environment: staging
    name: 部署到 Staging 环境
    
    steps:
    - name: Checkout 代码
      uses: actions/checkout@v4
      
    - name: 部署到 Staging 服务器
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_SSH_HOST }}
        username: ${{ secrets.STAGING_SSH_USERNAME }}
        key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}
        port: ${{ secrets.STAGING_SSH_PORT || 22 }}
        envs: GITHUB_SHA,GITHUB_REF_NAME,IMAGE_TAG
        script: |
          set -e
          
          echo "🚀 开始部署到 Staging 环境..."
          echo "提交 SHA: $GITHUB_SHA"
          echo "分支: $GITHUB_REF_NAME"
          echo "镜像标签: $IMAGE_TAG"
          
          # 创建部署目录
          sudo mkdir -p /opt/myapp/staging
          cd /opt/myapp/staging
          
          # 备份当前版本
          if [ -f docker-compose.yml ]; then
            echo "📦 备份当前版本..."
            sudo cp docker-compose.yml docker-compose.yml.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # 创建 docker-compose.yml
          sudo tee docker-compose.yml > /dev/null << EOF
          version: '3.8'
          services:
            app:
              image: $IMAGE_TAG
              container_name: myapp-staging
              restart: unless-stopped
              ports:
                - "8080:8080"
              environment:
                - NODE_ENV=staging
                - DATABASE_URL=\${DATABASE_URL}
                - REDIS_URL=\${REDIS_URL}
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.myapp-staging.rule=Host(\`staging.myapp.com\`)"
                - "traefik.http.routers.myapp-staging.tls=true"
                - "traefik.http.routers.myapp-staging.tls.certresolver=letsencrypt"
              volumes:
                - app-data:/app/data
                - ./logs:/app/logs
              networks:
                - app-network
                
          volumes:
            app-data:
            
          networks:
            app-network:
              external: true
          EOF
          
          # 创建环境变量文件
          sudo tee .env > /dev/null << EOF
          DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
          REDIS_URL=${{ secrets.STAGING_REDIS_URL }}
          JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}
          EOF
          
          # 登录到容器注册表
          echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # 拉取最新镜像
          echo "📥 拉取最新镜像..."
          sudo docker-compose pull
          
          # 停止旧容器
          echo "🛑 停止旧容器..."
          sudo docker-compose down || true
          
          # 启动新容器
          echo "🚀 启动新容器..."
          sudo docker-compose up -d
          
          # 等待服务启动
          echo "⏳ 等待服务启动..."
          sleep 30
          
          # 健康检查
          echo "🔍 健康检查..."
          max_attempts=30
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            if curl -f http://localhost:8080/health >/dev/null 2>&1; then
              echo "✅ 服务启动成功!"
              break
            fi
            
            echo "⏳ 等待服务启动... ($((attempt + 1))/$max_attempts)"
            sleep 10
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "❌ 服务启动超时!"
            sudo docker-compose logs
            exit 1
          fi
          
          # 清理旧镜像
          echo "🧹 清理旧镜像..."
          sudo docker image prune -f
          
          # 记录部署信息
          sudo tee deploy-info.json > /dev/null << EOF
          {
            "deploy_time": "$(date -Iseconds)",
            "commit_sha": "$GITHUB_SHA",
            "branch": "$GITHUB_REF_NAME",
            "image_tag": "$IMAGE_TAG",
            "environment": "staging",
            "deployed_by": "${{ github.actor }}"
          }
          EOF
          
          echo "🎉 Staging 部署完成!"
      env:
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}

  deploy-production:
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    environment: production
    name: 部署到 Production 环境
    
    steps:
    - name: Checkout 代码
      uses: actions/checkout@v4
      
    - name: 部署到 Production 服务器
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_SSH_HOST }}
        username: ${{ secrets.PRODUCTION_SSH_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
        port: ${{ secrets.PRODUCTION_SSH_PORT || 22 }}
        envs: GITHUB_SHA,GITHUB_REF_NAME,IMAGE_TAG
        script: |
          set -e
          
          echo "🚀 开始部署到 Production 环境..."
          echo "提交 SHA: $GITHUB_SHA"
          echo "分支/标签: $GITHUB_REF_NAME"
          echo "镜像标签: $IMAGE_TAG"
          
          # 创建部署目录
          sudo mkdir -p /opt/myapp/production
          cd /opt/myapp/production
          
          # 备份当前版本
          if [ -f docker-compose.yml ]; then
            echo "📦 备份当前版本..."
            sudo cp docker-compose.yml docker-compose.yml.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # 创建 docker-compose.yml (生产环境配置)
          sudo tee docker-compose.yml > /dev/null << EOF
          version: '3.8'
          services:
            app:
              image: $IMAGE_TAG
              container_name: myapp-production
              restart: unless-stopped
              ports:
                - "8080:8080"
              environment:
                - NODE_ENV=production
                - DATABASE_URL=\${DATABASE_URL}
                - REDIS_URL=\${REDIS_URL}
              labels:
                - "traefik.enable=true"
                - "traefik.http.routers.myapp.rule=Host(\`myapp.com\`, \`www.myapp.com\`)"
                - "traefik.http.routers.myapp.tls=true"
                - "traefik.http.routers.myapp.tls.certresolver=letsencrypt"
              volumes:
                - app-data:/app/data
                - ./logs:/app/logs
              networks:
                - app-network
              deploy:
                resources:
                  limits:
                    memory: 1G
                    cpus: '0.5'
                  reservations:
                    memory: 512M
                    cpus: '0.25'
                    
          volumes:
            app-data:
            
          networks:
            app-network:
              external: true
          EOF
          
          # 创建环境变量文件
          sudo tee .env > /dev/null << EOF
          DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}
          REDIS_URL=${{ secrets.PRODUCTION_REDIS_URL }}
          JWT_SECRET=${{ secrets.PRODUCTION_JWT_SECRET }}
          EOF
          
          # 登录到容器注册表
          echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # 拉取最新镜像
          echo "📥 拉取最新镜像..."
          sudo docker-compose pull
          
          # 滚动更新 (零停机部署)
          echo "🔄 执行滚动更新..."
          
          # 启动新容器 (不同名称)
          sudo sed 's/myapp-production/myapp-production-new/g' docker-compose.yml > docker-compose-new.yml
          sudo docker-compose -f docker-compose-new.yml up -d
          
          # 等待新容器启动
          echo "⏳ 等待新容器启动..."
          sleep 60
          
          # 健康检查新容器
          if curl -f http://localhost:8080/health >/dev/null 2>&1; then
            echo "✅ 新容器启动成功，切换流量..."
            
            # 停止旧容器
            sudo docker-compose down || true
            
            # 重命名新容器
            sudo docker rename myapp-production-new myapp-production
            
            # 启动正式容器
            sudo docker-compose up -d
            
            echo "✅ 零停机部署完成!"
          else
            echo "❌ 新容器启动失败，回滚..."
            sudo docker-compose -f docker-compose-new.yml down
            exit 1
          fi
          
          # 清理
          sudo rm -f docker-compose-new.yml
          sudo docker image prune -f
          
          # 发送部署通知
          echo "📢 发送部署通知..."
          
          # 记录部署信息
          sudo tee deploy-info.json > /dev/null << EOF
          {
            "deploy_time": "$(date -Iseconds)",
            "commit_sha": "$GITHUB_SHA",
            "branch": "$GITHUB_REF_NAME",
            "image_tag": "$IMAGE_TAG",
            "environment": "production",
            "deployed_by": "${{ github.actor }}"
          }
          EOF
          
          echo "🎉 Production 部署完成!"
      env:
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}

  post-deploy:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    name: 部署后任务
    
    steps:
    - name: 发送 Slack 通知
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          部署状态: ${{ job.status }}
          环境: ${{ github.event.inputs.environment || 'auto' }}
          提交: ${{ github.sha }}
          分支: ${{ github.ref_name }}
          操作者: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: 创建 GitHub Release (仅标签触发)
      if: startsWith(github.ref, 'refs/tags/') && success()
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
        make_latest: true