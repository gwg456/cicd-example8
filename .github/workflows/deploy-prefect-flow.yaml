name: Deploy Prefect flow

on:
  push:
    branches:
      - main
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: samples28/cicd-example

jobs:
  deploy:
    name: Deploy
    runs-on: self-hosted
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure hosts for Docker Hub access
        run: |
          # 检查当前用户权限
          echo "当前用户: $(whoami)"
          echo "当前用户组: $(groups)"
          
          # 备份原始hosts文件
          sudo cp /etc/hosts /etc/hosts.backup.$(date +%Y%m%d_%H%M%S)
          
          # 检查docker-hosts.txt文件是否存在
          if [ ! -f "docker-hosts.txt" ]; then
            echo "❌ docker-hosts.txt 文件不存在"
            exit 1
          fi
          
          echo "📋 添加Docker Hub域名解析..."
          # 使用sudo和tee命令安全地添加内容
          sudo tee -a /etc/hosts < docker-hosts.txt
          
          echo "✅ Docker Hub域名配置完成"
          echo "📋 当前hosts文件末尾10行:"
          sudo tail -10 /etc/hosts

      - name: Restart Docker to apply hosts changes
        run: |
          # 重启Docker daemon以应用hosts配置变化
          echo "🔄 重启Docker daemon以应用hosts配置..."
          sudo systemctl restart docker
          
          # 等待Docker重启完成
          echo "⏳ 等待Docker重启完成..."
          sleep 10
          
          # 验证Docker状态
          docker info
          echo "✅ Docker重启完成"

      - name: Test Docker Hub connectivity from build context
        run: |
          # 测试Docker构建上下文的连接性
          echo "🧪 测试Docker构建上下文的Docker Hub访问..."
          
          # 测试宿主机连接
          echo "📡 宿主机连接测试:"
          nslookup registry-1.docker.io || echo "nslookup failed"
          ping -c 3 registry-1.docker.io || echo "Ping failed but continuing..."
          curl -I --connect-timeout 10 https://registry-1.docker.io/v2/ || echo "HTTP connection failed"
          
          # 测试Docker daemon能否拉取镜像
          echo "🐳 测试Docker daemon拉取能力:"
          if docker pull alpine:latest; then
            echo "✅ Docker Hub访问正常，使用标准Dockerfile"
            echo "BUILD_METHOD=standard" >> $GITHUB_ENV
          else
            echo "❌ Docker Hub访问失败，将使用中国网络优化版Dockerfile"
            echo "BUILD_METHOD=china" >> $GITHUB_ENV
          fi

      - name: Create container hosts file
        run: |
          # 创建容器专用的hosts文件
          echo "🔧 创建容器专用的hosts文件..."
          
          # 复制系统默认的hosts内容
          echo "127.0.0.1	localhost" > container-hosts
          echo "::1		localhost ip6-localhost ip6-loopback" >> container-hosts
          echo "fe00::0		ip6-localnet" >> container-hosts
          echo "ff00::0		ip6-mcastprefix" >> container-hosts
          echo "ff02::1		ip6-allnodes" >> container-hosts
          echo "ff02::2		ip6-allrouters" >> container-hosts
          
          # 添加Docker Hub的域名解析
          echo "# Docker Hub hosts for container" >> container-hosts
          cat docker-hosts.txt | grep -v "^#" | grep -v "^$" >> container-hosts
          
          echo "✅ 容器hosts文件创建完成:"
          cat container-hosts

      - name: Extract Docker Hub hosts for container build
        run: |
          # 给脚本添加执行权限
          chmod +x scripts/extract-docker-hosts.sh
          
          # 提取Docker Hub相关的hosts条目
          echo "🔍 提取Docker Hub hosts配置..."
          ./scripts/extract-docker-hosts.sh
          
          # 检查是否成功生成了add-hosts文件
          if [ -f "docker-add-hosts.txt" ]; then
            echo "✅ 成功提取Docker Hub hosts配置"
            echo "📋 提取的配置:"
            cat docker-add-hosts.txt
            
            # 创建GitHub Actions环境变量格式 (用于buildx add-hosts)
            echo "DOCKER_ADD_HOSTS<<EOF" >> $GITHUB_ENV
            cat docker-add-hosts.txt | sed 's/:/ /' >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            
          else
            echo "❌ 未能生成docker-add-hosts.txt文件，使用默认配置"
            # 使用默认配置
            echo "DOCKER_ADD_HOSTS<<EOF" >> $GITHUB_ENV
            echo "registry-1.docker.io 52.4.71.198" >> $GITHUB_ENV
            echo "auth.docker.io 54.85.56.253" >> $GITHUB_ENV
            echo "production.cloudflare.docker.com 52.72.232.213" >> $GITHUB_ENV
            echo "index.docker.io 52.1.38.175" >> $GITHUB_ENV
            echo "registry.docker.io 52.4.71.198" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.citoken }}

      - name: Set up Docker Buildx (with network host access)
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker
          use: true
          driver-opts: |
            network=host
          buildkitd-flags: |
            --allow-insecure-entitlement security.insecure
            --allow-insecure-entitlement network.host

      - name: Generate version tag
        id: version
        run: |
          echo "VERSION=v$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image (Standard)
        if: env.BUILD_METHOD == 'standard'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          network: host
          load: true
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          allow: network.host,security.insecure
          add-hosts: ${{ env.DOCKER_ADD_HOSTS }}
        timeout-minutes: 20

      - name: Build and push Docker image (China Network Optimized)
        if: env.BUILD_METHOD == 'china'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.china
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          network: host
          load: true
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          allow: network.host,security.insecure
        timeout-minutes: 20

      - name: Deploy using the built image
        run: |
          # 输出将要使用的hosts配置方案
          echo "🔧 使用挂载hosts文件方式运行容器..."
          echo "📋 构建方法: ${{ env.BUILD_METHOD }}"
          echo "📋 容器hosts文件内容:"
          cat container-hosts | grep -E "(docker|localhost)"
          
          # 使用挂载容器专用hosts文件方式运行
          docker run --rm \
            -v $(pwd)/container-hosts:/etc/hosts \
            -e PREFECT_API_URL=${{ secrets.PREFECT_API_URL }} \
            -e IMAGE_REPO=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            -e IMAGE_TAG=${{ steps.version.outputs.VERSION }} \
            -e WORK_POOL_NAME=my-docker-pool2 \
            -e DEPLOY_MODE=true \
            -v /var/run/docker.sock:/var/run/docker.sock \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
        timeout-minutes: 10
