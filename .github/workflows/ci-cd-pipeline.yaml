name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: samples28/cicd-example
  PYTHON_VERSION: '3.12'

jobs:
  # 代码质量检查
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run linting
        run: |
          make lint
          
      - name: Run type checking
        run: |
          mypy flow.py config.py
          
      - name: Run security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-report
          path: bandit-report.json

  # 单元测试
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests
        run: |
          make test
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/

  # 构建和推送镜像
  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Generate version tag
        id: version
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "VERSION=v$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT
            echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
          else
            echo "VERSION=v$(date +'%Y%m%d%H%M')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
            echo "ENVIRONMENT=staging" >> $GITHUB_OUTPUT
          fi
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PREFECT_API_URL=${{ secrets.PREFECT_API_URL }}
            IMAGE_REPO=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            IMAGE_TAG=${{ steps.version.outputs.VERSION }}
            WORK_POOL_NAME=my-docker-pool2

  # 部署到测试环境
  deploy-staging:
    name: Deploy to Staging
    runs-on: self-hosted
    needs: build
    if: github.ref != 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          docker run --rm \
            -e PREFECT_API_URL=${{ secrets.STAGING_PREFECT_API_URL }} \
            -e IMAGE_REPO=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            -e IMAGE_TAG=${{ needs.build.outputs.version }} \
            -e WORK_POOL_NAME=staging-docker-pool \
            -e DEPLOY_MODE=true \
            -e ENVIRONMENT=staging \
            -v /var/run/docker.sock:/var/run/docker.sock \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}
            
      - name: Health check
        run: |
          # 等待部署完成
          sleep 30
          # 检查部署状态
          curl -f ${{ secrets.STAGING_PREFECT_API_URL }}/health || exit 1

  # 部署到生产环境
  deploy-production:
    name: Deploy to Production
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Pre-deployment checks
        run: |
          # 检查生产环境状态
          echo "Performing pre-deployment checks..."
          
      - name: Deploy to production
        run: |
          docker run --rm \
            -e PREFECT_API_URL=${{ secrets.PREFECT_API_URL }} \
            -e IMAGE_REPO=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            -e IMAGE_TAG=${{ needs.build.outputs.version }} \
            -e WORK_POOL_NAME=production-docker-pool \
            -e DEPLOY_MODE=true \
            -e ENVIRONMENT=production \
            -v /var/run/docker.sock:/var/run/docker.sock \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}
            
      - name: Post-deployment verification
        run: |
          # 等待部署完成
          sleep 60
          # 验证部署
          curl -f ${{ secrets.PREFECT_API_URL }}/health || exit 1
          # 检查工作流状态
          # 这里可以添加更详细的验证逻辑
          
      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "Production deployment successful"
            # 这里可以添加通知逻辑（Slack、邮件等）
          else
            echo "Production deployment failed"
            # 这里可以添加告警逻辑
          fi

  # 回滚机制（手动触发）
  rollback:
    name: Rollback
    runs-on: self-hosted
    if: github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
      - name: Get previous version
        id: previous
        run: |
          # 获取上一个稳定版本
          PREVIOUS_VERSION=$(docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "table {{.Tag}}" | grep -v latest | head -2 | tail -1)
          echo "VERSION=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          
      - name: Rollback deployment
        run: |
          docker run --rm \
            -e PREFECT_API_URL=${{ secrets.PREFECT_API_URL }} \
            -e IMAGE_REPO=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            -e IMAGE_TAG=${{ steps.previous.outputs.VERSION }} \
            -e WORK_POOL_NAME=production-docker-pool \
            -e DEPLOY_MODE=true \
            -e ENVIRONMENT=production \
            -v /var/run/docker.sock:/var/run/docker.sock \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.previous.outputs.VERSION }}