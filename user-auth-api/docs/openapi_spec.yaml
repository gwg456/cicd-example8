openapi: 3.1.0
info:
  title: User Auth API
  description: A comprehensive REST API with user registration, authentication, and role-based access control
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api.example.com
    description: Production server

paths:
  /:
    get:
      summary: Root endpoint
      description: Welcome message and API information
      tags:
        - General
      responses:
        '200':
          description: Welcome message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Welcome to User Auth API"
                  version:
                    type: string
                    example: "1.0.0"
                  docs:
                    type: string
                    example: "/docs"
                  redoc:
                    type: string
                    example: "/redoc"

  /health:
    get:
      summary: Health check
      description: Check API health status
      tags:
        - General
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"

  /api/v1/auth/register:
    post:
      summary: Register new user
      description: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/v1/auth/login:
    post:
      summary: Login user
      description: Authenticate user with username/password and return access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/auth/login/json:
    post:
      summary: Login user (JSON)
      description: Authenticate user with JSON payload and return access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/me:
    get:
      summary: Get current user
      description: Get current authenticated user information
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update current user
      description: Update current authenticated user information
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/v1/users/:
    get:
      summary: List users
      description: Get list of users (admin/manager only)
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: skip
          in: query
          description: Number of records to skip
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: Maximum number of records to return
          required: false
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/{user_id}:
    get:
      summary: Get user by ID
      description: Get user information by ID
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update user
      description: Update user information (superuser only)
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete user
      description: Delete user (superuser only)
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully"
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/users/{user_id}/roles/{role_id}:
    post:
      summary: Assign role to user
      description: Assign a role to a user (superuser only)
      tags:
        - Users
        - Roles
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
        - name: role_id
          in: path
          required: true
          description: Role ID
          schema:
            type: integer
      responses:
        '200':
          description: Role assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Role assigned successfully"
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User or role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Remove role from user
      description: Remove a role from a user (superuser only)
      tags:
        - Users
        - Roles
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
        - name: role_id
          in: path
          required: true
          description: Role ID
          schema:
            type: integer
      responses:
        '200':
          description: Role removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Role removed successfully"
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User or role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/roles/:
    get:
      summary: List roles
      description: Get list of roles (admin/manager only)
      tags:
        - Roles
      security:
        - BearerAuth: []
      parameters:
        - name: skip
          in: query
          description: Number of records to skip
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: Maximum number of records to return
          required: false
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: List of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create role
      description: Create a new role (superuser only)
      tags:
        - Roles
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreate'
      responses:
        '200':
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Role already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/v1/roles/{role_id}:
    get:
      summary: Get role by ID
      description: Get role information by ID (admin/manager only)
      tags:
        - Roles
      security:
        - BearerAuth: []
      parameters:
        - name: role_id
          in: path
          required: true
          description: Role ID
          schema:
            type: integer
      responses:
        '200':
          description: Role information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Role not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        full_name:
          type: string
          nullable: true
          example: "John Doe"
        is_active:
          type: boolean
          default: true
          example: true
        is_superuser:
          type: boolean
          default: false
          example: false
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          nullable: true
          example: "2023-01-01T00:00:00Z"
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
      required:
        - id
        - username
        - email
        - is_active
        - is_superuser
        - created_at

    UserCreate:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          minLength: 8
          example: "securepassword123"
        full_name:
          type: string
          nullable: true
          example: "John Doe"
        is_active:
          type: boolean
          default: true
          example: true
      required:
        - username
        - email
        - password

    UserUpdate:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          nullable: true
          example: "johndoe"
        email:
          type: string
          format: email
          nullable: true
          example: "john@example.com"
        password:
          type: string
          minLength: 8
          nullable: true
          example: "newsecurepassword123"
        full_name:
          type: string
          nullable: true
          example: "John Doe"
        is_active:
          type: boolean
          nullable: true
          example: true

    UserLogin:
      type: object
      properties:
        username:
          type: string
          example: "johndoe"
        password:
          type: string
          example: "securepassword123"
      required:
        - username
        - password

    Role:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "admin"
        description:
          type: string
          nullable: true
          example: "Administrator role"
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
      required:
        - id
        - name
        - created_at

    RoleCreate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
          example: "admin"
        description:
          type: string
          nullable: true
          example: "Administrator role"
      required:
        - name

    Permission:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "user:read"
        description:
          type: string
          nullable: true
          example: "Read user information"
        resource:
          type: string
          example: "user"
        action:
          type: string
          example: "read"
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"
      required:
        - id
        - name
        - resource
        - action
        - created_at

    Token:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          example: "bearer"
      required:
        - access_token
        - token_type

    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
          example: "Error message"
      required:
        - detail

    ValidationError:
      type: object
      properties:
        detail:
          type: array
          items:
            type: object
            properties:
              loc:
                type: array
                items:
                  anyOf:
                    - type: string
                    - type: integer
                example: ["body", "username"]
              msg:
                type: string
                example: "field required"
              type:
                type: string
                example: "value_error.missing"
      required:
        - detail

tags:
  - name: General
    description: General API endpoints
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management operations
  - name: Roles
    description: Role management operations